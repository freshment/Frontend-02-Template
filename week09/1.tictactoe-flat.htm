<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .cell {
      width: 100px;
      height: 100px;
      background: green;
      display: inline-block;
      border: 1px solid white;
      vertical-align: middle;
      line-height: 100px;
      font-size: 50px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div id="board" />
</body>

<script>
  let pattern = [
    0, 0, 0,
    0, 0, 0,
    0, 0, 0
  ] // 0 表示'空'， 1 表示'圈', 2 表示'叉'
  let color = 1

  // step 1: 画出布局
  function show() {
    const board = document.getElementById('board')
    board.innerHTML = ''

    for(let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        const cell = document.createElement('div')
        cell.classList.add('cell')
        cell.innerText =
          pattern[i * 3 + j] == 2 ? '❌' :
          pattern[i * 3 + j] == 1 ? '⭕️' : ''
        cell.addEventListener('click', () => move(j, i))
        board.appendChild(cell)
      }
      board.appendChild(document.createElement('br'))
    }
  }

  // step2: 点击
  function move(x, y) {
    console.log('x y', x, y)
    pattern[y * 3 + x] = color

    if (check(pattern, color)) {
      alert(color == 2 ? '❌ is Winner!' : '⭕️ is Winner')
    }

    color = 3 - color // 1 or 2
    console.log(bestChoice(pattern, color))
    show()

    // if (willWin(pattern, color)) console.log(color == 2 ? '❌ will Win!' : '⭕️ will Win')
  }

  // step3: 检查是否胜利
  function check(pattern, color) {
    // 横行
    for (let i = 0; i < 3; i++) {
      let win = true
      for (let j = 0; j < 3; j++) {
        if (pattern[i * 3 + j] !== color) win = false
      }
      if (win) return true
    }
    // 竖行
    for (let i = 0; i < 3; i++) {
      let win = true
      for (let j = 0; j < 3; j++) {
        if (pattern[j * 3 + i] !== color) win = false
      }
      if (win) return true
    }
    // 坐标相等的斜向 x + y = 2
    {
      let win = true
      for (let j = 0; j < 3; j++) {
        if (pattern[j * 3 + 2 - j] !== color) win = false
      }
      if (win) return true
    }    
    // 坐标相等的斜向 x = y
    {
      let win = true
      for (let j = 0; j < 3; j++) {
        if (pattern[j * 3 + j] !== color) win = false
      }
      if (win) return true
    }
    return false
  }

  function clone(pattern) {
    return Object.create(pattern)
  }

  // step4: ai功能, 提示即将胜利的一方
  function willWin(pattern, color) {
    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        if (pattern[i * 3 + j] !== 0) continue
        let tmp = clone(pattern)
        tmp[i * 3 + j] = color
        if (check(tmp, color)) {
          return [j, i]
        }
      }
    }
    return null
  }

  function bestChoice(pattern, color) {
    let point = willWin(pattern, color)
    if (point) {
      return {
        point,
        result: 1 // -1 输， 0 和棋， 1 赢
      }
    }
    let result = -1
    outer:for(let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        if (pattern[i * 3 + j] !== 0) continue
        let tmp = clone(pattern)
        tmp[i * 3 + j] = color
        let opp = bestChoice(tmp, 3 - color)

        if (-opp.result >= result) {
          result = -opp.result
          point = [j, i]
        }

        // 剪枝
        if (result == 1) break outer
      }
    }
    return {
      point: point,
      result: point ? result : 0
    }
  }

  show()
</script>
</html>
